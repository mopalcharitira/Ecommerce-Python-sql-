# 1. List all unique cities where customers are located.

SELECT DISTINCT
    customer_city
FROM
    customers;

# 2. Count the number of orders placed in 2017.

SELECT 
    COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2017;
    
# 3. Find the total sales per category.

SELECT 
    pr.product_category,
    ROUND(SUM(pa.payment_value), 2) AS total_value
FROM
    products pr
        JOIN
    order_items o ON pr.product_id = o.product_id
        JOIN
    payments pa ON o.order_id = pa.order_id
GROUP BY pr.product_category;

# 4. Calculate the percentage of orders that were paid in installments.

SELECT 
    (SUM(CASE
        WHEN payment_installments >= 1 THEN 1
        ELSE 0
    END)) / COUNT(*) * 100 AS total_percentage_of_instalement
FROM
    payments;
    
# 5. Count the number of customers from each state. 

SELECT 
    customer_state,
    COUNT(DISTINCT customer_id) AS customer_count
FROM
    customers
GROUP BY customer_state
ORDER BY customer_count DESC;

# 6. Calculate the number of orders per month in 2018.

SELECT 
    COUNT(order_id) AS order_count,
    MONTHNAME(order_purchase_timestamp) AS months
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTHNAME(order_purchase_timestamp);

# 7. Find the average number of products per order, grouped by customer city.

WITH count_per_order AS (
    SELECT 
        o.order_id, 
        o.customer_id, 
        COUNT(oi.order_id) AS order_count
    FROM 
        orders o
    JOIN 
        order_items oi ON o.order_id = oi.order_id
    GROUP BY 
        o.order_id, 
        o.customer_id
)
SELECT 
    c.customer_city, 
    ROUND(AVG(co.order_count), 2) AS avg_per_order
FROM 
    count_per_order co
JOIN 
    customers c ON co.customer_id = c.customer_id
GROUP BY 
    c.customer_city
ORDER BY 
    avg_per_order DESC;

# 8. Calculate the percentage of total revenue contributed by each product category.

SELECT 
    p.product_category,
    ROUND((SUM(pa.payment_value) / (SELECT 
                    SUM(payment_value)
                FROM
                    payments)) * 100,
            2) AS percentage_of_revenue
FROM
    products p
        JOIN
    order_items oi ON p.product_id = oi.product_id
        JOIN
    payments pa ON oi.order_id = pa.order_id
GROUP BY p.product_category
ORDER BY percentage_of_revenue DESC;

# 9. Identify the correlation between product price and the number of times a product has been purchased.

SELECT 
    p.product_category,
    ROUND(COUNT(oi.product_id), 2) AS order_count,
    AVG(oi.price) AS price
FROM
    products p
        JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_category;

# 10. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT 
    *,
    DENSE_RANK() OVER (ORDER BY revenue DESC) AS ranking
FROM (
    SELECT 
        o.seller_id, 
        ROUND(SUM(p.payment_value), 2) AS revenue
    FROM 
        order_items o
    JOIN 
        payments p ON p.order_id = o.order_id
    GROUP BY 
        o.seller_id
) AS a; 
 
 # 11. Calculate the moving average of order values for each customer over their order history.

SELECT 
    customer_id, 
    order_purchase_timestamp, 
    payment_value, 
    AVG(payment_value) OVER (
        PARTITION BY customer_id 
        ORDER BY order_purchase_timestamp 
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS moving_average
FROM (
    SELECT 
        o.customer_id, 
        o.order_purchase_timestamp, 
        p.payment_value
    FROM 
        orders o
    JOIN 
        payments p ON p.order_id = o.order_id
) AS a;

# 12. Calculate the cumulative sales per month for each year.

SELECT 
    years, 
    months, 
    sales, 
    SUM(sales) OVER (ORDER BY years, months) AS cumulative_sales
FROM (
    SELECT 
        YEAR(order_purchase_timestamp) AS years, 
        MONTH(order_purchase_timestamp) AS months, 
        ROUND(SUM(payment_value), 2) AS sales
    FROM 
        orders o
    JOIN 
        payments p ON p.order_id = o.order_id
    GROUP BY 
        YEAR(order_purchase_timestamp), 
        MONTH(order_purchase_timestamp)
    ORDER BY 
        years, 
        months
) AS a;

# 13. Calculate the year-over-year growth rate of total sales.

WITH year_growth AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS years, 
        SUM(p.payment_value) AS sales
    FROM 
        orders o
    JOIN 
        payments p ON p.order_id = o.order_id
    GROUP BY 
        years
)
SELECT 
    years,
    (sales - LAG(sales, 1) OVER (ORDER BY years)) / LAG(sales, 1) OVER (ORDER BY years) * 100 AS yoy_growth_percentage
FROM 
    year_growth;

# 14. Identify the top 3 customers who spent the most money in each year.

SELECT 
    customer_id, 
    years, 
    payments, 
    d_rank
FROM (
    SELECT 
        o.customer_id, 
        YEAR(o.order_purchase_timestamp) AS years, 
        SUM(p.payment_value) AS payments, 
        DENSE_RANK() OVER (
            PARTITION BY YEAR(o.order_purchase_timestamp) 
            ORDER BY SUM(p.payment_value) DESC
        ) AS d_rank
    FROM 
        orders o
    JOIN 
        payments p ON p.order_id = o.order_id
    GROUP BY 
        o.customer_id, 
        YEAR(o.order_purchase_timestamp)
) AS a
WHERE 
    d_rank <= 3;
